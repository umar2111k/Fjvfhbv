#
# Copyright (C) 2024 by Moonshining1@Github, < https://github.com/Moonshining1 >.
#
# This file is part of < https://github.com/Moonshining1/ANNIE-MUSIC > project,
# and is released under the MIT License.
# Please see < https://github.com/Moonshining1/ANNIE-MUSIC/blob/master/LICENSE >
#
# All rights reserved.
#
import re
from math import ceil
from typing import Union

from pyrogram import Client, filters, types
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

import config
from config import BANNED_USERS, START_IMG_URL
from strings import get_string
from ANNIEMUSIC import HELPABLE, app
from ANNIEMUSIC.utils.database import get_lang, is_commanddelete_on
from ANNIEMUSIC.utils.decorators.language import LanguageStart
from ANNIEMUSIC.utils.inline.help import private_help_panel

### Command
HELP_COMMAND = ["help"]

COLUMN_SIZE = 4
NUM_COLUMNS = 3


class EqInlineKeyboardButton(InlineKeyboardButton):
    def __eq__(self, other):
        return self.text == other.text

    def __lt__(self, other):
        return self.text < other.text

    def __gt__(self, other):
        return self.text > other.text


def paginate_modules(page_n, module_dict, prefix, chat=None, close: bool = False):
    if not chat:
        modules = sorted(
            [
                EqInlineKeyboardButton(
                    x.__MODULE__,
                    callback_data="{}_module({},{})".format(
                        prefix, x.__MODULE__.lower(), page_n
                    ),
                )
                for x in module_dict.values()
            ]
        )
    else:
        modules = sorted(
            [
                EqInlineKeyboardButton(
                    x.__MODULE__,
                    callback_data="{}_module({},{},{})".format(
                        prefix, chat, x.__MODULE__.lower(), page_n
                    ),
                )
                for x in module_dict.values()
            ]
        )

    pairs = [modules[i : i + NUM_COLUMNS] for i in range(0, len(modules), NUM_COLUMNS)]

    max_num_pages = ceil(len(pairs) / COLUMN_SIZE) if len(pairs) > 0 else 1
    modulo_page = page_n % max_num_pages

    if len(pairs) > COLUMN_SIZE:
        pairs = pairs[modulo_page * COLUMN_SIZE : COLUMN_SIZE * (modulo_page + 1)] + [
            (
                EqInlineKeyboardButton(
                    "‚ùÆ",
                    callback_data="{}_prev({})".format(
                        prefix,
                        modulo_page - 1 if modulo_page > 0 else max_num_pages - 1,
                    ),
                ),
                EqInlineKeyboardButton(
                    "·¥Ñ ü·¥ès·¥á" if close else "B·¥Ä·¥Ñ·¥ã",
                    callback_data="close" if close else "feature",
                ),
                EqInlineKeyboardButton(
                    "‚ùØ",
                    callback_data="{}_next({})".format(prefix, modulo_page + 1),
                ),
            )
        ]
    else:
        pairs.append(
            [
                EqInlineKeyboardButton(
                    "·¥Ñ ü·¥ès·¥á" if close else "B·¥Ä·¥Ñ·¥ã",
                    callback_data="close" if close else "feature",
                ),
            ]
        )

    return pairs


@app.on_message(filters.command(["help"]) & filters.private & ~BANNED_USERS)
@app.on_callback_query(filters.regex("settings_back_helper") & ~BANNED_USERS)
async def helper_private(
    client: app, update: Union[types.Message, types.CallbackQuery]
):
    is_callback = isinstance(update, types.CallbackQuery)
    if is_callback:
        try:
            await update.answer()
        except:
            pass

        chat_id = update.message.chat.id
        language = await get_lang(chat_id)
        _ = get_string(language)
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))

        await update.edit_message_text(_["help_1"], reply_markup=keyboard)
    else:
        chat_id = update.chat.id
        if await is_commanddelete_on(update.chat.id):
            try:
                await update.delete()
            except:
                pass
        language = await get_lang(chat_id)
        _ = get_string(language)
        keyboard = InlineKeyboardMarkup(
            paginate_modules(0, HELPABLE, "help", close=True)
        )
        if START_IMG_URL:

            await update.reply_photo(
                photo=START_IMG_URL,
                caption=_["help_1"],
                reply_markup=keyboard,
            )

        else:

            await update.reply_text(
                text=_["help_1"],
                reply_markup=keyboard,
            )


@app.on_message(filters.command(HELP_COMMAND) & filters.group & ~BANNED_USERS)
@LanguageStart
async def help_com_group(client, message: Message, _):
    keyboard = private_help_panel(_)
    await message.reply_text(_["help_2"], reply_markup=InlineKeyboardMarkup(keyboard))

async def help_parser(name, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    return keyboard

@app.on_message(filters.command("help") & filters.group & ~BANNED_USERS)
@LanguageStart
async def help_command(client, message):
    # Define the buttons
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚Ä¢ Open in private ‚Ä¢", url="https://t.me/freyamusicbot?start=help")],
            [InlineKeyboardButton("‚Ä¢ Open here ‚Ä¢", callback_data="features")]
        ]
    )
    
    # Send photo with text and buttons
    await message.reply_photo(
        photo="http://ibb.co/zVCWXsq",  # Replace with your photo path or URL
        caption="¬ª Choose a way to get help from me ‚ú®",
        reply_markup=keyboard
            )

@app.on_message(filters.command("start") & filters.group & ~BANNED_USERS)
@LanguageStart
async def help_command(client, message):
    # Define the buttons
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚Ä¢ Add me ‚Ä¢", url="https://t.me/freyamusicbot?startgroup=true")],
            [InlineKeyboardButton("‚Ä¢ Update ‚Ä¢", url="https://t.me/Spark_Developer_Bots")]
        ]
    )
    
    # Send photo with text and buttons
    await message.reply_photo(
        photo="http://ibb.co/zVCWXsq",  # Replace with your photo path or URL
        caption="¬ª Here's how I can help you! Please click the button below to view all available commands. ‚ú®",
        reply_markup=keyboard
    )


@app.on_callback_query(filters.regex(r"help_(.*?)"))
async def help_button(client, query):
    home_match = re.match(r"help_home\((.+?)\)", query.data)
    mod_match = re.match(r"help_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back\((\d+)\)", query.data)
    create_match = re.match(r"help_create", query.data)
    language = await get_lang(query.message.chat.id)
    _ = get_string(language)
    top_text = _["help_1"]

    if mod_match:
        module = mod_match.group(1)
        prev_page_num = int(mod_match.group(2))
        text = (
            f"<b><u>H·¥á Ä·¥á Is T ú·¥á H·¥á ü·¥ò F·¥è Ä {HELPABLE[module].__MODULE__}:</u></b>\n"
            + HELPABLE[module].__HELP__
        )

        key = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="‚Ü™Ô∏è  ô·¥Ä·¥Ñ·¥ã", callback_data=f"help_back({prev_page_num})"
                    ),
                    InlineKeyboardButton(text="üîÑ ·¥Ñ ü·¥ès·¥á", callback_data="close"),
                ],
            ]
        )

        await query.message.edit(
            text=text,
            reply_markup=key,
            disable_web_page_preview=True,
        )

    elif home_match:
        await app.send_message(
            query.from_user.id,
            text=home_text_pm,
            reply_markup=InlineKeyboardMarkup(out),
        )
        await query.message.delete()

    elif prev_match:
        curr_page = int(prev_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(curr_page, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif next_match:
        next_page = int(next_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(next_page, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif back_match:
        prev_page_num = int(back_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(prev_page_num, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif create_match:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))

        await query.message.edit(
            text=top_text,
            reply_markup=keyboard,
            disable_web_page_preview=True,
        )

    await client.answer_callback_query(query.id)


# ===================================

from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from config import BANNED_USERS
from strings import helpers
from ANNIEMUSIC import app
from ANNIEMUSIC.utils.decorators.language import languageCB


@app.on_callback_query(filters.regex("music_callback") & ~BANNED_USERS)
@languageCB
async def music_helper_cb(client, CallbackQuery, _):

    callback_data = CallbackQuery.data.strip()

    cb = callback_data.split(None, 1)[1]

    keyboard = back_to_music(_)

    if cb == "hb1":

        await CallbackQuery.edit_message_text(helpers.HELP_1, reply_markup=keyboard)

    elif cb == "hb2":

        await CallbackQuery.edit_message_text(helpers.HELP_2, reply_markup=keyboard)

    elif cb == "hb3":

        await CallbackQuery.edit_message_text(helpers.HELP_3, reply_markup=keyboard)

    elif cb == "hb4":

        await CallbackQuery.edit_message_text(helpers.HELP_4, reply_markup=keyboard)

    elif cb == "hb5":

        await CallbackQuery.edit_message_text(helpers.HELP_5, reply_markup=keyboard)

    elif cb == "hb6":

        await CallbackQuery.edit_message_text(helpers.HELP_6, reply_markup=keyboard)

    elif cb == "hb7":

        await CallbackQuery.edit_message_text(helpers.HELP_7, reply_markup=keyboard)

    elif cb == "hb8":

        await CallbackQuery.edit_message_text(helpers.HELP_8, reply_markup=keyboard)

    elif cb == "hb9":

        await CallbackQuery.edit_message_text(helpers.HELP_9, reply_markup=keyboard)

    elif cb == "hb10":

        await CallbackQuery.edit_message_text(helpers.HELP_10, reply_markup=keyboard)

    elif cb == "hb11":

        await CallbackQuery.edit_message_text(helpers.HELP_11, reply_markup=keyboard)

    elif cb == "hb12":

        await CallbackQuery.edit_message_text(helpers.HELP_12, reply_markup=keyboard)

    elif cb == "hb13":

        await CallbackQuery.edit_message_text(helpers.HELP_13, reply_markup=keyboard)

    elif cb == "hb14":

        await CallbackQuery.edit_message_text(helpers.HELP_14, reply_markup=keyboard)

    elif cb == "hb15":

        await CallbackQuery.edit_message_text(helpers.HELP_15, reply_markup=keyboard)


@app.on_callback_query(filters.regex("management_callback") & ~BANNED_USERS)
@languageCB
async def management_callback_cb(client, CallbackQuery, _):

    callback_data = CallbackQuery.data.strip()

    cb = callback_data.split(None, 1)[1]

    keyboard = back_to_management(_)

    if cb == "extra":

        await CallbackQuery.edit_message_text(helpers.EXTRA_1, reply_markup=keyboard)

    elif cb == "hb1":

        await CallbackQuery.edit_message_text(helpers.MHELP_1, reply_markup=keyboard)

    elif cb == "hb2":

        await CallbackQuery.edit_message_text(helpers.MHELP_2, reply_markup=keyboard)

    elif cb == "hb3":

        await CallbackQuery.edit_message_text(helpers.MHELP_3, reply_markup=keyboard)

    elif cb == "hb4":

        await CallbackQuery.edit_message_text(helpers.MHELP_4, reply_markup=keyboard)

    elif cb == "hb5":

        await CallbackQuery.edit_message_text(helpers.MHELP_5, reply_markup=keyboard)

    elif cb == "hb6":

        await CallbackQuery.edit_message_text(helpers.MHELP_6, reply_markup=keyboard)

    elif cb == "hb7":

        await CallbackQuery.edit_message_text(helpers.MHELP_7, reply_markup=keyboard)

    elif cb == "hb8":

        await CallbackQuery.edit_message_text(helpers.MHELP_8, reply_markup=keyboard)

    elif cb == "hb9":

        await CallbackQuery.edit_message_text(helpers.MHELP_9, reply_markup=keyboard)

    elif cb == "hb10":

        await CallbackQuery.edit_message_text(helpers.MHELP_10, reply_markup=keyboard)

    elif cb == "hb11":

        await CallbackQuery.edit_message_text(helpers.MHELP_11, reply_markup=keyboard)

    elif cb == "hb12":

        await CallbackQuery.edit_message_text(helpers.MHELP_12, reply_markup=keyboard)


@app.on_callback_query(filters.regex("tools_callback") & ~BANNED_USERS)
@languageCB
async def tools_callback_cb(client, CallbackQuery, _):

    callback_data = CallbackQuery.data.strip()

    cb = callback_data.split(None, 1)[1]

    keyboard = back_to_tools(_)

    if cb == "ai":

        await CallbackQuery.edit_message_text(helpers.AI_1, reply_markup=keyboard)

    elif cb == "hb1":

        await CallbackQuery.edit_message_text(helpers.THELP_1, reply_markup=keyboard)

    elif cb == "hb2":

        await CallbackQuery.edit_message_text(helpers.THELP_2, reply_markup=keyboard)

    elif cb == "hb3":

        await CallbackQuery.edit_message_text(helpers.THELP_3, reply_markup=keyboard)

    elif cb == "hb4":

        await CallbackQuery.edit_message_text(helpers.THELP_4, reply_markup=keyboard)

    elif cb == "hb5":

        await CallbackQuery.edit_message_text(helpers.THELP_5, reply_markup=keyboard)

    elif cb == "hb6":

        await CallbackQuery.edit_message_text(helpers.THELP_6, reply_markup=keyboard)

    elif cb == "hb7":

        await CallbackQuery.edit_message_text(helpers.THELP_7, reply_markup=keyboard)

    elif cb == "hb8":

        await CallbackQuery.edit_message_text(helpers.THELP_8, reply_markup=keyboard)

    elif cb == "hb9":

        await CallbackQuery.edit_message_text(helpers.THELP_9, reply_markup=keyboard)

    elif cb == "hb10":

        await CallbackQuery.edit_message_text(helpers.THELP_10, reply_markup=keyboard)

    elif cb == "hb11":

        await CallbackQuery.edit_message_text(helpers.THELP_11, reply_markup=keyboard)

    elif cb == "hb12":

        await CallbackQuery.edit_message_text(helpers.THELP_12, reply_markup=keyboard)


@app.on_callback_query(filters.regex("developer"))
async def about_callback(client: Client, callback_query: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text="ùì¢ùìπùì™ùìªùì¥ ùììùìÆùìøùìÆùìµùì∏ùìπùìÆùìª‚ú®", url=f"https://t.me/about_spark_developer/7"),
            InlineKeyboardButton(
                text="Owner's clan üéÑ", url=f"https://t.me/mastixmusic"
            ),
        ],
        [
            InlineKeyboardButton(text="üéÑ Galaxy üéÑ", callback_data="galaxy"),
            InlineKeyboardButton(text="‚≠ê Help ‚≠ê", callback_data="features"),
        ],
        [
            InlineKeyboardButton(text="üîô Back", callback_data="about")
        ],  # Use a default label for the back button
    ]
    await callback_query.message.edit_text(
        "**Hey,**\n\n**I am Freya bot ‚ú®**\n**I am created with love by my [ùì¢ùìπùì™ùìªùì¥ ùììùìÆùìøùìÆùìµùì∏ùìπùìÆùìª‚ú®](https://t.me/about_spark_developer/7)üåô ‚ù§.**",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


@app.on_callback_query(filters.regex("feature"))
async def feature_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(
                text="üéÑ Galaxy üéÑ",
                callback_data="galaxy",
            ),
        ],
        [
            InlineKeyboardButton(text="Music üéß", callback_data="music"),
            InlineKeyboardButton(text="Managment ‚úî", callback_data="management"),
        ],
        [
            InlineKeyboardButton(text="Tools‚ú®", callback_data="tools"),
            InlineKeyboardButton(text="Extraü¶ã", callback_data="settings_back_helper"),
        ],
        [InlineKeyboardButton(text="‚úØ Home ‚úØ", callback_data="go_to_start")],
    ]
    k = f"""Freya bot ü¶ã help menu ‚ú®*"""
    await callback_query.message.edit_text(
        text=k, reply_markup=InlineKeyboardMarkup(keyboard)
    )


@app.on_callback_query(filters.regex("music"))
async def music_callback(client: Client, callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(text="A·¥Ö·¥ç…™…¥", callback_data="music_callback hb1"),
                InlineKeyboardButton(text="A·¥ú·¥õ ú", callback_data="music_callback hb2"),
                InlineKeyboardButton(
                    text="B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", callback_data="music_callback hb3"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="B ü-C ú·¥Ä·¥õ", callback_data="music_callback hb4"
                ),
                InlineKeyboardButton(
                    text="B ü-Us·¥á Ä", callback_data="music_callback hb5"
                ),
                InlineKeyboardButton(text="C-P ü·¥Ä è", callback_data="music_callback hb6"),
            ],
            [
                InlineKeyboardButton(text="G-B·¥Ä…¥", callback_data="music_callback hb7"),
                InlineKeyboardButton(text="L·¥è·¥è·¥ò", callback_data="music_callback hb8"),
                InlineKeyboardButton(
                    text="M·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á", callback_data="music_callback hb9"
                ),
            ],
            [
                InlineKeyboardButton(text="P…™…¥…¢", callback_data="music_callback hb10"),
                InlineKeyboardButton(text="P ü·¥Ä è", callback_data="music_callback hb11"),
                InlineKeyboardButton(
                    text="S ú·¥ú“ì“ì ü·¥á", callback_data="music_callback hb12"
                ),
            ],
            [
                InlineKeyboardButton(text="S·¥á·¥á·¥ã", callback_data="music_callback hb13"),
                InlineKeyboardButton(text="S·¥è…¥…¢", callback_data="music_callback hb14"),
                InlineKeyboardButton(text="S·¥ò·¥á·¥á·¥Ö", callback_data="music_callback hb15"),
            ],
            [InlineKeyboardButton(text="‚úØ  ô·¥Ä·¥Ñ·¥ã ‚úØ", callback_data=f"feature")],
        ]
    )

    await callback_query.message.edit(
        f"``**C ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥.  I“ì  è·¥è·¥ú' Ä·¥á “ì·¥Ä·¥Ñ…™…¥…¢ ·¥Ä…¥ è ·¥ò Ä·¥è ô ü·¥á·¥ç  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Äs·¥ã …™…¥ [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.](t.me/mastixmusic)**\n\n**A ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú: /**``",
        reply_markup=keyboard,
    )


@app.on_callback_query(filters.regex("management"))
async def management_callback(client: Client, callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text="—îx·¥õ Ä·¥ß", callback_data="management_callback extra"
                )
            ],
            [
                InlineKeyboardButton(
                    text=" ô·¥ßŒ∑", callback_data="management_callback hb1"
                ),
                InlineKeyboardButton(
                    text="·¥ã…™·¥Ñ·¥ãs", callback_data="management_callback hb2"
                ),
                InlineKeyboardButton(
                    text="œªœÖ·¥õ—î", callback_data="management_callback hb3"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="·¥ò…™Œ∑", callback_data="management_callback hb4"
                ),
                InlineKeyboardButton(
                    text="s·¥õ·¥ß“ì“ì", callback_data="management_callback hb5"
                ),
                InlineKeyboardButton(
                    text="s—î·¥õ œÖ·¥ò", callback_data="management_callback hb6"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="zœÉœª ô…™—î", callback_data="management_callback hb7"
                ),
                InlineKeyboardButton(
                    text="…¢·¥ßœª—î", callback_data="management_callback hb8"
                ),
                InlineKeyboardButton(
                    text="…™œª·¥òœÉs·¥õ—î Ä", callback_data="management_callback hb9"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="s·¥ßŒ∑…¢ œª·¥ß·¥õ·¥ß", callback_data="management_callback hb10"
                ),
                InlineKeyboardButton(
                    text="·¥õ Ä·¥ßŒ∑s ü·¥ß·¥õ—î", callback_data="management_callback hb11"
                ),
                InlineKeyboardButton(
                    text="·¥õ-…¢ Ä·¥ß·¥ò ú", callback_data="management_callback hb12"
                ),
            ],
            [InlineKeyboardButton(text="‚úØ  ô·¥Ä·¥Ñ·¥ã ‚úØ", callback_data=f"feature")],
        ]
    )

    await callback_query.message.edit(
        f"``**C ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥.  I“ì  è·¥è·¥ú' Ä·¥á “ì·¥Ä·¥Ñ…™…¥…¢ ·¥Ä…¥ è ·¥ò Ä·¥è ô ü·¥á·¥ç  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Äs·¥ã …™…¥ [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.](t.me/tg_friendsss)**\n\n**A ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú: /**``",
        reply_markup=keyboard,
    )


@app.on_callback_query(filters.regex("tools"))
async def tools_callback(client: Client, callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(text="·¥Ñ ú·¥ß·¥õ…¢·¥ò·¥õ", callback_data="tools_callback ai")],
            [
                InlineKeyboardButton(text="…¢œÉœÉ…¢ ü—î", callback_data="tools_callback hb1"),
                InlineKeyboardButton(
                    text="·¥õ·¥õs-·¥†œÉ…™·¥Ñ—î", callback_data="tools_callback hb2"
                ),
                InlineKeyboardButton(text="…™Œ∑Íú∞œÉ", callback_data="tools_callback hb3"),
            ],
            [
                InlineKeyboardButton(text="“ìœÉŒ∑·¥õ", callback_data="tools_callback hb4"),
                InlineKeyboardButton(text="œª·¥ß·¥õ ú", callback_data="tools_callback hb5"),
                InlineKeyboardButton(text="·¥õ·¥ß…¢·¥ß ü ü", callback_data="tools_callback hb6"),
            ],
            [
                InlineKeyboardButton(text="…™œª·¥ß…¢—î", callback_data="tools_callback hb7"),
                InlineKeyboardButton(text=" ú·¥ßs·¥õ·¥ß…¢", callback_data="tools_callback hb8"),
                InlineKeyboardButton(
                    text="s·¥õ…™·¥Ñ·¥ã—î Äs", callback_data="tools_callback hb9"
                ),
            ],
            [
                InlineKeyboardButton(text="“ìœÖŒ∑", callback_data="tools_callback hb10"),
                InlineKeyboardButton(
                    text="«´œÖœÉ·¥õ ü è", callback_data="tools_callback hb11"
                ),
                InlineKeyboardButton(
                    text="·¥õ Ä - ·¥Ö ú", callback_data="tools_callback hb12"
                ),
            ],
            [InlineKeyboardButton(text="‚úØ  ô·¥Ä·¥Ñ·¥ã ‚úØ", callback_data=f"feature")],
        ]
    )

    await callback_query.message.edit(
        f"``**C ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥.  I“ì  è·¥è·¥ú' Ä·¥á “ì·¥Ä·¥Ñ…™…¥…¢ ·¥Ä…¥ è ·¥ò Ä·¥è ô ü·¥á·¥ç  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Äs·¥ã …™…¥ [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.](t.me/mastixmusic)**\n\n**A ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú: /**``",
        reply_markup=keyboard,
    )


@app.on_callback_query(filters.regex("back_to_music"))
async def feature_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(
                text="üéÑ Galaxy üéÑ",
                callback_data="galaxy",
            ),
        ],
        [
            InlineKeyboardButton(text="Music üéß", callback_data="music"),
            InlineKeyboardButton(text="Managment ‚úî", callback_data="management"),
        ],
        [
            InlineKeyboardButton(text="Tools‚ú®", callback_data="tools"),
            InlineKeyboardButton(text="Extraü¶ã", callback_data="settings_back_helper"),
        ],
        [InlineKeyboardButton(text="‚úØ  ú·¥è·¥ç·¥á ‚úØ", callback_data="go_to_start")],
    ]

    k = f"""Freya bot ü¶ã help menu ‚ú®"""
    await callback_query.message.edit_text(
        text=k,
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


def back_to_music(_):
    upl = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text=_["BACK_BUTTON"],
                    callback_data=f"music",
                ),
            ]
        ]
    )
    return upl


def back_to_tools(_):
    upl = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text=_["BACK_BUTTON"],
                    callback_data=f"tools",
                ),
            ]
        ]
    )
    return upl


def back_to_management(_):
    upl = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text=_["BACK_BUTTON"],
                    callback_data=f"management",
                ),
            ]
        ]
    )
    return upl


@app.on_callback_query(filters.regex("about"))
async def about_callback(client: Client, callback_query: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(
                text="‚Ä¢ Freya 2.0 ‚Ä¢",
                callback_data="annie",
            ),
        ],
        [
            InlineKeyboardButton(text="‚≠ê Support ‚≠ê", url=f"t.me/mastixmusic"),
            InlineKeyboardButton(text="üë®‚ÄçüíªDeveloper", callback_data="developer"),
        ],
        [
            InlineKeyboardButton(text="Guide üìÉ", callback_data="basic_guide"),
            InlineKeyboardButton(text="ü•ÄSource", callback_data="source"),
        ],
        [InlineKeyboardButton(text="üîô Back", callback_data="go_to_start")],
    ]
    await callback_query.message.edit_text(
        f"Hi i am Freya bot ü¶ã\nA powerful and awesome telegram group management and music player that gives you spam-free and fun environment for your groups :)\n\n**·¥Ä ·¥ò·¥è·¥°·¥á Ä“ì·¥ú ü ·¥Ä…¥·¥Ö ·¥Ä·¥°·¥ás·¥è·¥ç·¥á ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥Ä…¥·¥Ö ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä ·¥õ ú·¥Ä·¥õ …¢…™·¥†·¥ás  è·¥è·¥ú s·¥ò·¥Ä·¥ç-“ì Ä·¥á·¥á ·¥Ä…¥·¥Ö “ì·¥ú…¥ ·¥á…¥·¥†…™ Ä·¥è…¥·¥ç·¥á…¥·¥õ “ì·¥è Ä  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òs :)\n\n‚óè I can restrict users.\n‚óè I can greet users with customizable welcome messages and even set a group's rules.\n‚óè I have a music player system.\n‚óè I have almost all awaited group managing features like ban, mute, welcome, kick, federation, and many more.\n‚óè I have a note-keeping system, blacklists, and even predetermined replies on certain keywords.\n‚óè I check for admins' permissions before executing any command and more stuff\n\n‚ûª ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° “ì·¥è Ä …¢·¥á·¥õ·¥õ…™…¥…¢  ô·¥Äs…™·¥Ñ  ú·¥á ü·¥© ·¥Ä…¥·¥Ö …™…¥“ì·¥è ·¥Ä ô·¥è·¥ú·¥õ Freya bot ü¶ã.",
        reply_markup=InlineKeyboardMarkup(buttons),
    )

@app.on_callback_query(filters.regex("Freya"))
async def about_callback(client: Client, callback_query: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text="Guide üìÉ", url=f"t.me/mastixmusic"),
            InlineKeyboardButton(text="üë®‚ÄçüíªDeveloper", callback_data="developer"),
        ],
        [
            InlineKeyboardButton(text="Guide üìÉ", callback_data="basic_guide"),
            InlineKeyboardButton(text="ü•ÄSource", callback_data="source"),
        ],
        [InlineKeyboardButton(text="üîô Back", callback_data="go_to_start")],
    ]
    await callback_query.message.edit_text(
        f"We have added or upgraded the following plugins given below ‚ú®\n\n‚Ä¢ Added ai response and ai img(chat-gpt).\n‚Ä¢ Added quotly.\n‚Ä¢ Added emoji game.\n‚Ä¢ Update howsall, judge, wish, afk feature.\n‚Ä¢ Update write, bug and fedration tools.\n‚Ä¢ Added gif and animated sticker kang also.\n‚Ä¢ Added Pinterest,yt and Insta video downloader.\n‚Ä¢ Added inbuilt music system.\n\nFor more info about Freya updates check @Spark_Developer_Bots üéÑüëÄ.",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


# If the back button has different meanings in various panels, you can set different callbacks
@app.on_callback_query(filters.regex("support"))
async def back_button_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(text="Developer üë®‚Äçüíª", user_id=config.OWNER_ID[0]),
            InlineKeyboardButton(
                text="üå±…¢…™·¥õ ú·¥ú ô Repo Paidüå±",
                url="https://t.me/Spark_Developer",
            ),
        ],
        [
            InlineKeyboardButton(text="‚õÖGroup‚õÖ", url=f"https://t.me/mastixmusic"),
            InlineKeyboardButton(text="üéÑUpdateüéÑ", url=f"https://t.me/Spark_Developer_Bots "),
        ],
        [InlineKeyboardButton(text="‚úØ  ú·¥è·¥ç·¥á ‚úØ", callback_data="go_to_start")],
    ]

    await callback_query.message.edit_text(
        "‡πè Click on the button to get more about me.\n\nIf you find any error or bug on bot or want to give any feedback about the bot then you are welcome to support chat  (‚úø‚ó†‚Äø‚ó†).",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


@app.on_callback_query(filters.regex("galaxy"))
async def back_button_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(text="Developer üë®‚Äçüíª", callback_data="developer"),
            InlineKeyboardButton(
                text="üå±…¢…™·¥õ ú·¥ú ô Repo Paidüå±",
                url="https://t.me/Spark_Developer",
            ),
        ],
        [
            InlineKeyboardButton(text="Freya updates", url=f"https://t.me/mastixmusic"),
            InlineKeyboardButton(text="Share ur queryüí°", url=f"https://t.me/Study_Ocean_Bot"),
        ],
        [InlineKeyboardButton(text="‚úØ  ú·¥è·¥ç·¥á ‚úØ", callback_data="go_to_start")],
    ]
    await callback_query.message.edit_text(
        "Join our groups....üßä\n\nFor more info about meowsteric updates check support üéÑüëÄ",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )    

@app.on_callback_query(filters.regex("source"))
async def back_button_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(text="Developer üë®‚Äçüíª", callback_data="developer"),
            InlineKeyboardButton(
                text="üå±…¢…™·¥õ ú·¥ú ô Repo Paidüå±",
                url="https://t.me/Spark_Developer",
            ),
        ],
        [
            InlineKeyboardButton(text="Freya updates", url=f"https://t.me/Spark_Developer_Bots"),
            InlineKeyboardButton(text="Share ur queryüí°", url=f"https://t.me/Study_Ocean_Bot"),
        ],
        [InlineKeyboardButton(text="‚úØ  ú·¥è·¥ç·¥á ‚úØ", callback_data="go_to_start")],
    ]
    
    await callback_query.message.edit_text(
        "Hey,\nThis is Freya bot ü¶ã\n\nAn open source telegram group management+ music bot\nMy source code is paid [Repo](https://t.me/Spark_Developer) (‚úø‚ó†‚Äø‚ó†)",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

@app.on_callback_query(filters.regex("basic_guide"))
async def settings_back_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [[InlineKeyboardButton(text="‚úØ  ô·¥Ä·¥Ñ·¥ã ‚úØ", callback_data="about")]]
    guide_text = f"** ú·¥á è! ·¥õ ú…™s …™s ·¥Ä «´·¥ú…™·¥Ñ·¥ã ·¥Ä…¥·¥Ö s…™·¥ç·¥ò ü·¥á …¢·¥ú…™·¥Ö·¥á ·¥õ·¥è ·¥ús…™…¥…¢** {app.mention} **üéâ**\n\n**1. ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á '·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ñ ü·¥Ä…¥'  ô·¥ú·¥õ·¥õ·¥è…¥.**\n**2. s·¥á ü·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò …¥·¥Ä·¥ç·¥á.**\n**3. …¢ Ä·¥Ä…¥·¥õ ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä ü ü …¥·¥á·¥Ñ·¥áss·¥Ä Ä è ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s “ì·¥è Ä s·¥ç·¥è·¥è·¥õ ú ·¥Ä…¥·¥Ö “ì·¥ú ü ü “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥·¥Ä ü…™·¥õ è.**\n\n**·¥õ·¥è ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ ú·¥è·¥ès·¥á  ô·¥á·¥õ·¥°·¥á·¥á…¥ ·¥ç·¥ús…™·¥Ñ ·¥è Ä ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥ò Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ·¥ás.**\n**…™“ì  è·¥è·¥ú s·¥õ…™ ü ü “ì·¥Ä·¥Ñ·¥á ·¥Ä…¥ è …™ss·¥ú·¥ás, “ì·¥á·¥á ü “ì Ä·¥á·¥á ·¥õ·¥è  Ä·¥á·¥Ä·¥Ñ ú ·¥è·¥ú·¥õ “ì·¥è Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚ú®**"
    await callback_query.message.edit_text(
        text=guide_text, reply_markup=InlineKeyboardMarkup(keyboard)
    )
